from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ParseMode
import os
import re
import sqlite3
from datetime import datetime
from dotenv import load_dotenv
from fastapi import FastAPI

load_dotenv()
TOKEN = os.getenv("TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ .env —Ñ–∞–π–ª—É
app = FastAPI()


# –î–æ–¥–∞—î–º–æ –ø—Ä–æ–∫—Å—ñ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
conn = sqlite3.connect('users.db')
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
cursor.execute('''
CREATE TABLE IF NOT EXISTS us (
    TelegramID INTEGER,
    FirstName TEXT,
    RequestTime DATETIME,
    InputText TEXT,
    OutputText TEXT
)
''')
conn.commit()



@dp.message_handler(commands=['stats'])
async def send_stats(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if message.from_user.id in [7668870630, 6633299008]:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        cursor.execute('SELECT * FROM us LIMIT 15')
        rows = cursor.fetchall()
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if rows:
            stats_message = "üìä <b>Statistics</b>:\n\n"
            stats_message += "<b>FirstName</b> | <b>RequestTime</b> | <b>InputText</b> | <b>OutputText</b>\n"
            stats_message += "-" * 80 + "\n"
            for row in rows:
                request_time = datetime.strptime(row[2], "%Y-%m-%d %H:%M:%S.%f").strftime("%Y-%m-%d %H:%M")
                stats_message += f"{row[1]} | {request_time} | {row[3]} | {row[4]}\n"
                stats_message += "-" * 80 + "\n"
        else:
            stats_message = "No records found."

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await message.reply(stats_message, parse_mode=ParseMode.HTML)
    else:
        await message.reply("You don't have permission to view the statistics.")

@dp.message_handler()
async def reverse_and_clean(message: types.Message):
    if message.text.startswith('1'):
        # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ –æ–∫—Ä–µ–º—ñ —á–∞—Å—Ç–∏–Ω–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–æ—é
        requests = message.text.split(',')

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        results = []

        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Ç –æ–∫—Ä–µ–º–æ
        for request in requests:
            # –í–∏–¥–∞–ª—è—î–º–æ —Å–∏–º–≤–æ–ª–∏ () –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤–∏—Ä–∞–∑—É
            cleaned_text = re.sub(r'[()]', '', request.strip())

            # –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–π —ñ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–º–≤–æ–ª, —è–∫—â–æ —Ä—è–¥–æ–∫ –¥–æ–≤—à–∏–π –∑–∞ 2 —Å–∏–º–≤–æ–ª–∏
            if len(cleaned_text) > 2:
                trimmed_text = cleaned_text[1:-1]
            else:
                trimmed_text = cleaned_text  # –Ø–∫—â–æ —Ä—è–¥–æ–∫ –∫–æ—Ä–æ—Ç–∫–∏–π, –∑–∞–ª–∏—à–∞—î–º–æ –π–æ–≥–æ —è–∫ —î

            # –ü–µ—Ä–µ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç
            reversed_text = trimmed_text[::-1]

            # –î–æ–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ —Å–ø–∏—Å–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            results.append(reversed_text)

            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–∂–µ–Ω –∑–∞–ø–∏—Ç –≤ –±–∞–∑—É
            cursor.execute('''
                INSERT INTO us (TelegramID, FirstName, RequestTime, InputText, OutputText)
                VALUES (?, ?, ?, ?, ?)
            ''', (message.from_user.id, message.from_user.first_name, datetime.now(), request.strip(), reversed_text))
            conn.commit()

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —è–∫ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await message.reply(', '.join(results))
    else:
        return

if __name__ == '__main__':
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5000)
    executor.start_polling(dp, skip_updates=True)

